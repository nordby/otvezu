# telegram_bot.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–µ–∑–¥–æ–∫

import asyncio
import logging
from typing import Dict, Any, Optional
from datetime import datetime, date, timedelta
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from database import DatabaseManager, User

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
class TripStates(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()
    waiting_for_vehicle = State()
    waiting_for_waybill = State()
    waiting_for_route = State()
    waiting_for_quantity = State()
    confirming_trip = State()

class ExpeditionBot:
    def __init__(self, token: str, db_manager: DatabaseManager):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.db = db_manager
        self.user_sessions: Dict[int, Dict[str, Any]] = {}
        
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.dp.message(Command("start"))
        async def cmd_start(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = self.db.get_user_by_telegram_id(user_id)
            if user:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if user_id not in self.user_sessions:
                    self.user_sessions[user_id] = {
                        'user': user,
                        'current_trip': {}
                    }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Å
                active_trip = self.db.get_user_active_trip(user.id)
                menu = self.get_main_menu(active_trip)
                
                welcome_msg = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name} {user.surname}!\n"
                
                if active_trip:
                    status_text = {
                        'created': '—Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏',
                        'started': '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
                    }
                    welcome_msg += f"\nüìç –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Å #{active_trip['id']} ({status_text.get(active_trip['status'], active_trip['status'])})"
                
                welcome_msg += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
                
                await message.answer(welcome_msg, reply_markup=menu)
                return
            
            await message.answer(
                "üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —ç–∫—Å–ø–µ–¥–∏—Ä–æ–≤–∞–Ω–∏—è!\n\n"
                "–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.set_state(TripStates.waiting_for_login)
        
        @self.dp.message(StateFilter(TripStates.waiting_for_login))
        async def process_login(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏"""
            surname = message.text.strip()
            await state.update_data(surname=surname)
            
            await message.answer(
                f"–§–∞–º–∏–ª–∏—è: {surname}\n"
                f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:"
            )
            await state.set_state(TripStates.waiting_for_password)
        
        @self.dp.message(StateFilter(TripStates.waiting_for_password))
        async def process_password(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
            password = message.text.strip()
            data = await state.get_data()
            surname = data.get('surname')
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.authenticate_user(surname, password)
            
            if user and user.role == 'driver':
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                self.db.link_telegram_user(user.id, message.from_user.id)
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.user_sessions[message.from_user.id] = {
                    'user': user,
                    'current_trip': {}
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Å
                active_trip = self.db.get_user_active_trip(user.id)
                menu = self.get_main_menu(active_trip)
                
                welcome_msg = f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name} {user.surname}!"
                
                if active_trip:
                    status_text = {
                        'created': '—Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏',
                        'started': '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
                    }
                    welcome_msg += f"\n\nüìç –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Å #{active_trip['id']} ({status_text.get(active_trip['status'], active_trip['status'])})"
                
                welcome_msg += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
                
                await message.answer(welcome_msg, reply_markup=menu)
                await state.clear()
            else:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å!\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:"
                )
                await state.set_state(TripStates.waiting_for_login)
        
        @self.dp.message(Command("trip"))
        async def cmd_trip(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /trip - –Ω–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞"""
            await start_trip_creation(message, state)
        
        async def start_trip_creation(message: types.Message, state: FSMContext):
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–∞"""
            user_id = message.from_user.id
            
            if user_id not in self.user_sessions:
                await message.answer(
                    "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—Ö–æ–¥–∞."
                )
                return
            
            user = self.user_sessions[user_id]['user']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–π—Å–∞
            active_trip = self.db.get_user_active_trip(user.id)
            if active_trip:
                await message.answer(
                    f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–π—Å #{active_trip['id']}.\n"
                    f"–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.",
                    reply_markup=self.get_main_menu(active_trip)
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¢–°
            vehicles = self.db.get_active_vehicles()
            if not vehicles:
                await message.answer(
                    "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–µ–π—Å
            self.user_sessions[user_id]['current_trip'] = {}
            
            await message.answer(
                "üöõ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–π—Å–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ:",
                reply_markup=self.get_vehicles_keyboard(vehicles)
            )
            await state.set_state(TripStates.waiting_for_vehicle)
        
        @self.dp.message(StateFilter(TripStates.waiting_for_vehicle))
        async def process_vehicle_selection(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¢–°"""
            user_id = message.from_user.id
            vehicle_text = message.text.strip()
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¢–°: '{vehicle_text}'")
            
            # –ù–∞—Ö–æ–¥–∏–º –¢–° –ø–æ –Ω–æ–º–µ—Ä—É - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            vehicles = self.db.get_active_vehicles()
            selected_vehicle = None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            for vehicle in vehicles:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∫–Ω–æ–ø–∫–∏
                expected_text = f"üöõ {vehicle.number} ({vehicle.model})"
                if vehicle_text == expected_text:
                    selected_vehicle = vehicle
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–°: {vehicle.number}")
                    break
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É
                elif vehicle.number in vehicle_text:
                    selected_vehicle = vehicle
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É –¢–°: {vehicle.number}")
                    break
            
            if not selected_vehicle:
                logger.warning(f"–¢–° –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{vehicle_text}'")
                await message.answer(
                    "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                    reply_markup=self.get_vehicles_keyboard(vehicles)
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¢–°
            self.user_sessions[user_id]['current_trip']['vehicle_id'] = selected_vehicle.id
            self.user_sessions[user_id]['current_trip']['vehicle_number'] = selected_vehicle.number
            
            await message.answer(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –¢–°: {selected_vehicle.number} ({selected_vehicle.model})\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞:",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.set_state(TripStates.waiting_for_waybill)
        
        @self.dp.message(StateFilter(TripStates.waiting_for_waybill))
        async def process_waybill(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞"""
            user_id = message.from_user.id
            waybill_number = message.text.strip()
            
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
            if not waybill_number.isdigit() or len(waybill_number) < 6:
                await message.answer(
                    "‚ùå –ù–æ–º–µ—Ä –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞:"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
            self.user_sessions[user_id]['current_trip']['waybill_number'] = waybill_number
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
            routes = self.db.get_active_routes(include_price=False)  # –¶–µ–Ω—É –≤–æ–¥–∏—Ç–µ–ª—è–º –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            if not routes:
                await message.answer(
                    "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            await message.answer(
                f"‚úÖ –ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç: {waybill_number}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
                reply_markup=self.get_routes_keyboard(routes)
            )
            await state.set_state(TripStates.waiting_for_route)
        
        @self.dp.message(StateFilter(TripStates.waiting_for_route))
        async def process_route_selection(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞"""
            user_id = message.from_user.id
            route_text = message.text.strip()
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –º–∞—Ä—à—Ä—É—Ç: '{route_text}'")
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ä—à—Ä—É—Ç –ø–æ –Ω–æ–º–µ—Ä—É - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            routes = self.db.get_active_routes()
            selected_route = None
            
            for route in routes:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∫–Ω–æ–ø–∫–∏
                expected_text = f"üó∫ –ú–∞—Ä—à—Ä—É—Ç ‚Ññ{route.number} - {route.name}"
                if route_text == expected_text:
                    selected_route = route
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞: {route.number}")
                    break
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É
                elif f"‚Ññ{route.number}" in route_text:
                    selected_route = route
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∞: {route.number}")
                    break
            
            if not selected_route:
                logger.warning(f"–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{route_text}'")
                routes_display = self.db.get_active_routes(include_price=False)
                await message.answer(
                    "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                    reply_markup=self.get_routes_keyboard(routes_display)
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
            self.user_sessions[user_id]['current_trip']['route_id'] = selected_route.id
            self.user_sessions[user_id]['current_trip']['route_number'] = selected_route.number
            self.user_sessions[user_id]['current_trip']['route_name'] = selected_route.name
            
            await message.answer(
                f"‚úÖ –í—ã–±—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç: ‚Ññ{selected_route.number} - {selected_route.name}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–≤ —à—Ç—É–∫–∞—Ö):",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.set_state(TripStates.waiting_for_quantity)
        
        @self.dp.message(StateFilter(TripStates.waiting_for_quantity))
        async def process_quantity(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
            user_id = message.from_user.id
            quantity_text = message.text.strip()
            
            try:
                quantity = int(quantity_text)
                if quantity <= 0:
                    raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            except ValueError:
                await message.answer(
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            self.user_sessions[user_id]['current_trip']['quantity_delivered'] = quantity
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            trip_data = self.user_sessions[user_id]['current_trip']
            user = self.user_sessions[user_id]['user']
            
            summary = (
                f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–π—Å–∞\n\n"
                f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {user.first_name} {user.surname}\n"
                f"üöõ –¢–°: {trip_data['vehicle_number']}\n"
                f"üìÑ –ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç: {trip_data['waybill_number']}\n"
                f"üó∫ –ú–∞—Ä—à—Ä—É—Ç: ‚Ññ{trip_data['route_number']} - {trip_data['route_name']}\n"
                f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
                f"üìÖ –î–∞—Ç–∞: {date.today().strftime('%d.%m.%Y')}\n\n"
                f"‚ùó –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–∂–∞—Ç—å '–ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É' –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å, "
                f"–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É' –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏.\n\n"
                f"–°–æ–∑–¥–∞—Ç—å —Ä–µ–π—Å?"
            )
            
            await message.answer(
                summary,
                reply_markup=self.get_confirmation_keyboard()
            )
            await state.set_state(TripStates.confirming_trip)
        
        @self.dp.message(StateFilter(TripStates.confirming_trip))
        async def process_confirmation(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–π—Å–∞"""
            user_id = message.from_user.id
            confirmation = message.text.strip()
            
            if confirmation == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                trip_data = self.user_sessions[user_id]['current_trip']
                user = self.user_sessions[user_id]['user']
                
                try:
                    trip_id = self.db.create_trip(
                        user_id=user.id,
                        vehicle_id=trip_data['vehicle_id'],
                        route_id=trip_data['route_id'],
                        waybill_number=trip_data['waybill_number'],
                        quantity_delivered=trip_data['quantity_delivered']
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ–π—Å
                    active_trip = self.db.get_user_active_trip(user.id)
                    
                    await message.answer(
                        f"‚úÖ –†–µ–π—Å #{trip_id} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                        f"üìç –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏\n"
                        f"‚è∞ –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É' –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –ø–æ –º–∞—Ä—à—Ä—É—Ç—É.",
                        reply_markup=self.get_main_menu(active_trip)
                    )
                    
                    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–∞
                    self.user_sessions[user_id]['current_trip'] = {}
                    await state.clear()
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–∞: {e}")
                    await message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–π—Å–∞.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        reply_markup=self.get_main_menu()
                    )
                    await state.clear()
                    
            elif confirmation == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
                await message.answer(
                    "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–π—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–π—Å–∞.",
                    reply_markup=self.get_main_menu()
                )
                self.user_sessions[user_id]['current_trip'] = {}
                await state.clear()
            else:
                await message.answer(
                    "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                    reply_markup=self.get_confirmation_keyboard()
                )
        
        @self.dp.message(Command("help"))
        async def cmd_help(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
            help_text = (
                "üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n"
                "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
                "/trip - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–π—Å\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
                "üîÑ –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Å–æ–º:\n"
                "1. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–π—Å (–≤—ã–±–æ—Ä –¢–°, –º–∞—Ä—à—Ä—É—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)\n"
                "2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É' –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å\n"
                "3. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É' –ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏\n"
                "4. –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n\n"
                "üìç –°—Ç–∞—Ç—É—Å—ã —Ä–µ–π—Å–æ–≤:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–Ω - –æ–∂–∏–¥–∞–µ—Ç –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏\n"
                "‚Ä¢ –í –ø—É—Ç–∏ - –ø–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞—Ç–∞\n"
                "‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω - –ø–æ–µ–∑–¥–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n\n"
                "‚ùì –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await message.answer(help_text)
        
        @self.dp.message()
        async def handle_text_messages(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
            user_id = message.from_user.id
            text = message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            current_state = await state.get_state()
            if current_state is not None:
                # –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{text}' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
                return
            
            if user_id not in self.user_sessions:
                await message.answer(
                    "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—Ö–æ–¥–∞."
                )
                return
            
            user = self.user_sessions[user_id]['user']
            
            if text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–µ–π—Å":
                await start_trip_creation(message, state)
                
            elif text == "üöÄ –ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É":
                await self.handle_start_trip(message, user)
                
            elif text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É":
                await self.handle_complete_trip(message, user)
                
            elif text == "üìã –ú–æ–∏ —Ä–µ–π—Å—ã":
                await self.show_user_trips(message, user)
                
            elif text == "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞":
                await cmd_help(message)
                
            else:
                logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{text}'")
                await message.answer(
                    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
                    reply_markup=self.get_main_menu()
                )
    
    async def handle_start_trip(self, message: types.Message, user: User):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏"""
        active_trip = self.db.get_user_active_trip(user.id)
        
        if not active_trip:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–π—Å–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏.",
                reply_markup=self.get_main_menu()
            )
            return
        
        if active_trip['status'] != 'created':
            await message.answer(
                f"‚ùå –†–µ–π—Å #{active_trip['id']} —É–∂–µ –Ω–∞—á–∞—Ç –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.",
                reply_markup=self.get_main_menu(active_trip)
            )
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            calendar_event_id = await self.create_calendar_event(active_trip, user, duration_hours=0.017)
            
            # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–µ–∑–¥–∫—É
            success = self.db.start_trip(active_trip['id'], calendar_event_id)
            
            if success:
                start_time = datetime.now().strftime('%H:%M')
                await message.answer(
                    f"üöÄ –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞—Ç–∞!\n\n"
                    f"üìç –†–µ–π—Å: #{active_trip['id']}\n"
                    f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}\n"
                    f"üó∫ –ú–∞—Ä—à—Ä—É—Ç: ‚Ññ{active_trip['route_number']} - {active_trip['route_name']}\n"
                    f"üöõ –¢–°: {active_trip['vehicle_number']}\n\n"
                    f"üìÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.\n"
                    f"‚è∞ –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É' –ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏.",
                    reply_markup=self.get_main_menu(self.db.get_user_active_trip(user.id))
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–µ–∑–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=self.get_main_menu(active_trip)
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–µ–∑–¥–∫–∏.",
                reply_markup=self.get_main_menu(active_trip)
            )
    
    async def handle_complete_trip(self, message: types.Message, user: User):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
        active_trip = self.db.get_user_active_trip(user.id)
        
        if not active_trip:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–π—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=self.get_main_menu()
            )
            return
        
        if active_trip['status'] != 'started':
            await message.answer(
                f"‚ùå –†–µ–π—Å #{active_trip['id']} –Ω–µ –Ω–∞—á–∞—Ç –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.",
                reply_markup=self.get_main_menu(active_trip)
            )
            return
        
        try:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–µ–∑–¥–∫—É
            success = self.db.complete_trip(active_trip['id'])

            if success:
                logger.info(f"üéØ –†–µ–π—Å {active_trip['id']} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                completed_trips = self.db.get_trips_for_report()
                completed_trip = None
                for trip in completed_trips:
                    if trip['id'] == active_trip['id']:
                        completed_trip = trip
                        break
                
                duration_text = ""
                if completed_trip and completed_trip.get('duration_hours'):
                    hours = int(completed_trip['duration_hours'])
                    minutes = int((completed_trip['duration_hours'] - hours) * 60)
                    duration_text = f"\n‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º–∏–Ω"
                    logger.info(f"üîç –î–∞–Ω–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–π—Å–∞: —Å—Ç–∞—Ç—É—Å={completed_trip.get('status')}, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å={completed_trip.get('duration_hours')}")
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ä–µ–π—Å {active_trip['id']} –≤ –±–∞–∑–µ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                await self.update_calendar_event(active_trip, user)
                
                end_time = datetime.now().strftime('%H:%M')
                await message.answer(
                    f"üèÅ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üìç –†–µ–π—Å: #{active_trip['id']}\n"
                    f"üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {end_time}{duration_text}\n"
                    f"üó∫ –ú–∞—Ä—à—Ä—É—Ç: ‚Ññ{active_trip['route_number']} - {active_trip['route_name']}\n"
                    f"üöõ –¢–°: {active_trip['vehicle_number']}\n"
                    f"üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {active_trip['quantity_delivered']} —à—Ç.\n\n"
                    f"üìÖ –°–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º.\n"
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏.",
                    reply_markup=self.get_main_menu()
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=self.get_main_menu(active_trip)
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏.",
                reply_markup=self.get_main_menu(active_trip)
            )
    
    async def show_user_trips(self, message: types.Message, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            end_date = date.today()
            start_date = end_date - timedelta(days=7)
            
            trips = self.db.get_trips_for_report(
                start_date=start_date,
                end_date=end_date,
                user_id=user.id
            )
            
            if not trips:
                await message.answer(
                    "üìã –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–π—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.",
                    reply_markup=self.get_main_menu()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_text = f"üìã –í–∞—à–∏ —Ä–µ–π—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
            
            status_emoji = {
                'created': 'üü°',
                'started': 'üîµ', 
                'completed': 'üü¢',
                'cancelled': 'üî¥'
            }
            
            status_text = {
                'created': '–°–æ–∑–¥–∞–Ω',
                'started': '–í –ø—É—Ç–∏',
                'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
            }
            
            for trip in trips[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                emoji = status_emoji.get(trip['status'], '‚ö™')
                status = status_text.get(trip['status'], trip['status'])
                
                trip_info = f"{emoji} –†–µ–π—Å #{trip['id']} ({status})\n"
                trip_info += f"üìÖ {trip['date']}\n"
                trip_info += f"üó∫ –ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç: {trip['waybill_number']}\n"
                trip_info += f"üöõ –¢–°: {trip['vehicle_number']}\n"
                trip_info += f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {trip['quantity']} —à—Ç.\n"
                
                if trip['duration_hours']:
                    hours = int(trip['duration_hours'])
                    minutes = int((trip['duration_hours'] - hours) * 60)
                    trip_info += f"‚è± –í—Ä–µ–º—è: {hours}—á {minutes}–º–∏–Ω\n"
                
                trip_info += "\n"
                report_text += trip_info
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            completed_trips = [t for t in trips if t['status'] == 'completed']
            total_revenue = sum(t['total_amount'] for t in completed_trips)
            total_hours = sum(t['duration_hours'] for t in completed_trips if t['duration_hours'])
            
            report_text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:\n"
            report_text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ä–µ–π—Å–æ–≤: {len(completed_trips)}\n"

            if total_hours:
                report_text += f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_hours:.1f} —á–∞—Å–æ–≤\n"
            
            await message.answer(report_text, reply_markup=self.get_main_menu())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö.",
                reply_markup=self.get_main_menu()
            )
    
    def get_main_menu(self, active_trip: Dict[str, Any] = None) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–π—Å–∞"""
        builder = ReplyKeyboardBuilder()
        
        if active_trip:
            if active_trip['status'] == 'created':
                # –†–µ–π—Å —Å–æ–∑–¥–∞–Ω, –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É
                builder.row(KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É"))
            elif active_trip['status'] == 'started':
                # –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞—Ç–∞, –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
                builder.row(KeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É"))
        else:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–π—Å–∞, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            builder.row(KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–µ–π—Å"))
        
        builder.row(KeyboardButton(text="üìã –ú–æ–∏ —Ä–µ–π—Å—ã"))
        builder.row(KeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"))
        
        return builder.as_markup(resize_keyboard=True, persistent=True)
    
    def get_vehicles_keyboard(self, vehicles) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¢–°"""
        builder = ReplyKeyboardBuilder()
        for vehicle in vehicles:
            button_text = f"üöõ {vehicle.number} ({vehicle.model})"
            builder.row(KeyboardButton(text=button_text))
        return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    
    def get_routes_keyboard(self, routes) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞"""
        builder = ReplyKeyboardBuilder()
        for route in routes:
            button_text = f"üó∫ –ú–∞—Ä—à—Ä—É—Ç ‚Ññ{route.number} - {route.name}"
            builder.row(KeyboardButton(text=button_text))
        return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    
    def get_confirmation_keyboard(self) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        builder = ReplyKeyboardBuilder()
        builder.row(KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"))
        builder.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
        return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    
    async def create_calendar_event(self, trip_data: Dict[str, Any], user: User, duration_hours: float = 2.0) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"""
        try:
            from google_calendar import CalendarIntegration
            
            calendar_integration = CalendarIntegration(enabled=True)
            
            if not calendar_integration.enabled:
                logger.warning("Google Calendar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                return None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            calendar_trip_data = {
                'id': trip_data['id'],
                'waybill_number': trip_data['waybill_number'],
                'vehicle_number': trip_data['vehicle_number'],
                'route_number': trip_data['route_number'],
                'route_name': trip_data['route_name'],
                'quantity_delivered': trip_data['quantity_delivered'],
                'duration_hours': duration_hours,
                'started_at': datetime.now().isoformat()
            }
            
            calendar_user_data = {
                'id': user.id,
                'surname': user.surname,
                'first_name': user.first_name,
                'middle_name': user.middle_name
            }
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            event_id = calendar_integration.create_trip_event_sync(calendar_trip_data, calendar_user_data)
            
            if event_id:
                logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar: {event_id}")
                return event_id
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar")
                return None
                
        except ImportError:
            logger.warning("–ú–æ–¥—É–ª—å google_calendar –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {e}")
            return None
    
    async def update_calendar_event(self, trip_data: Dict[str, Any], user: User) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        try:
            from google_calendar import CalendarIntegration
            
            calendar_integration = CalendarIntegration(enabled=True)
            
            if not calendar_integration.enabled or not trip_data.get('calendar_event_id'):
                logger.warning("Google Calendar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç ID —Å–æ–±—ã—Ç–∏—è")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–∞
            logger.info(f"üîç –ò—â–µ–º —Ä–µ–π—Å ID: {trip_data['id']}")
            updated_trips = self.db.get_trips_for_report()
            
            current_trip = None
            for trip in updated_trips:
                if trip['id'] == trip_data['id']:
                    current_trip = trip
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–π—Å: {trip}")
                    break
            
            if not current_trip:
                logger.warning(f"‚ùå –†–µ–π—Å —Å ID {trip_data['id']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if not current_trip.get('duration_hours'):
                logger.warning(f"‚ö†Ô∏è –£ —Ä–µ–π—Å–∞ {trip_data['id']} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –°—Ç–∞—Ç—É—Å: {current_trip.get('status')}")
                
                # –ï—Å–ª–∏ —Ä–µ–π—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–µ—Ç duration_hours, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –±–µ–∑ –Ω–∏—Ö
                if current_trip.get('status') == 'completed':
                    logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
                else:
                    return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            calendar_trip_data = {
                'id': current_trip['id'],
                'waybill_number': current_trip['waybill_number'],
                'vehicle_number': current_trip['vehicle_number'],
                'route_number': trip_data['route_number'],
                'route_name': trip_data['route_name'],
                'quantity_delivered': current_trip.get('quantity', 0),
                'duration_hours': current_trip.get('duration_hours', 0),
                'started_at': current_trip.get('started_at'),
                'completed_at': current_trip.get('completed_at')
            }
            
            calendar_user_data = {
                'id': user.id,
                'surname': user.surname,
                'first_name': user.first_name,
                'middle_name': user.middle_name
            }
            
            logger.info(f"üìÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –¥–∞–Ω–Ω—ã–º–∏: {calendar_trip_data}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            success = calendar_integration.update_trip_event_sync(
                trip_data['calendar_event_id'], 
                calendar_trip_data, 
                calendar_user_data
            )
            
            if success:
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar: {trip_data['calendar_event_id']}")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar")
                return False
                
        except ImportError:
            logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å google_calendar –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {e}")
            return False
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            await self.bot.session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)
    BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from database import DatabaseManager
    db = DatabaseManager()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = ExpeditionBot(BOT_TOKEN, db)
    
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.start_polling()

if __name__ == "__main__":
    asyncio.run(main())